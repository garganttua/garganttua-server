# DONT FORGET TO ADD THE FOLLOWING ANNOTATION TO YOUR APPLICATION MAIN CLASS
# 
# @ComponentScan({"your.package.java", "org.sdc"})
#
#

com.garganttua.api.mongo=enabled

# Bug Fix
spring.main.allow-circular-references=true

# Indicates to the Spring Crudify Dynamic Domain Engine the packages where to search for entities
com.garganttua.api.engine.packages=com.garganttua

# Give access to data of all tenants for users that belongs to that tenant 
com.garganttua.api.magicTenantId=0

# Enables the Spring Domain Crudify built-in security environment.
# Passing this option is not enough to disable Spring Security as it just indicates that your API will implements its own security layer and will not use the Spring Domain Crudify built-in one. 
# You should use @SpringBootApplication(exclude = SecurityAutoConfiguration.class) when declaring your Spring Boot Application in order to completely disable Security. 
com.garganttua.api.security=disabled

# This option activate the authentication Rest endpoint.
com.garganttua.api.security.authentication=disabled

# This option indicates where the login password are held :
#  - dao : login/password are stored in database. You should implement :
#     - the data access object which is DB dependant 
#     - a class of type AbstractSpringCrudifyUserDetails which contains the technical object used to authenticate the user
#     - a bean of type AbstractSpringCrudifyDaoAuthenticationUserMapper which implements the mapping between your business object in the database, and the technical object used to authenticate the user
com.garganttua.api.security.authentication.type=dao

# The authentication mode :
#  - loginpassword : authentication based on login password
com.garganttua.api.security.authentication.mode=loginpassword

# The hash algorithm used to encode the password in the database.
#  - bcrypt
com.garganttua.api.security.authentication.password.encoder=bcrypt

# Indicates the kind of authorization the user must use to access Rest Endpoints
#  - token : the user should insert an access token in the Http request 
com.garganttua.api.security.authorization=token

# Type of token
#  - jwt
com.garganttua.api.security.authorization.token.type=jwt

# Storing token strategy : 
#  - none : tokens are not stored
#  - inmemory : tokens are stored in RAM (in a map) (NOT IMPLEMENTED)
#  - db : tokens are stored in a database : the data access object must be implemented and provided as a bean (NOT IMPLEMENTED)
com.garganttua.api.security.authorization.token.provider=none

# JWT signing token manager key storing 
#  - inmemory : keys are destroyed after reboot
#  - db (NOT IMPLEMENTED)
com.garganttua.api.security.authorization.token.jwt.key.manager=inmemory

# Algorithm used to sign and verify the jwt token
#  - HS256 hmac with sha256
com.garganttua.api.security.authorization.token.jwt.key.algorithm=HS512

# JWT signing key realm managed by the key manager
com.garganttua.api.security.authorization.token.jwt.key.realm=jwtTokenKey

# Indicate how the jwt token keys are renewed :
#  - auto : the token manager renew automatically the signing key (NOT IMPLEMENTED)
#  - ws :  the token manager exposes a Rest Endpoint to trigger a signing key renewal action (NOT IMPLEMENTED)
#  - none : the token manager does not renew the token signing key. It is recommended to set the key lifetime to 0 with this parameter
com.garganttua.api.security.authorization.token.jwt.key.renewal=none

# Indicates to the token manager the token signing key life time. The signing key expired once the life time is reached. 0 for infinite lifetime.
com.garganttua.api.security.authorization.token.jwt.key.lifetime=0

# Token signing key life time unit
com.garganttua.api.security.authorization.token.jwt.key.lifetime.unit=SECONDS

# Token lifetime in minutes. The delivered tokens expire when lifetime is reached. 0 for infinite lifetime.
# This time is Minutes 
com.garganttua.api.security.authorization.token.lifetime=200

# Exposes a Rest endpoint to allow users to refresh/renew their access access tokens (NOT IMPLEMENTED)
com.garganttua.api.security.authorization.token.renewal=enabled

# This option indicates that the userId must be extracted from the authorization sent by the caller and put it in the Http Request attribute
com.garganttua.api.security.extractUserId=enabled

# Expose the roles and rights list through an http rest endpoint
com.garganttua.api.security.exposeAuthorizations=disabled
