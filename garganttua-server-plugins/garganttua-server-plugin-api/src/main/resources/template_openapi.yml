openapi: 3.0.1
info:
  title: Test API
  description: 'This is a sample Spring Boot RESTful service using springdoc-openapi and OpenAPI 3.        The configured Magic Tenant ID is : 0'
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: Domain {{domain}}
paths:
  /{{domain}}:
    get:
      tags:
        - Domain {{domain}}
      summary: Get the list of entities.
      description: ''
      operationId: ''
      parameters:
      - name: tenantId
        in: header
        description: ''
        required: true
        schema:
          type: string
      - name: mode
        in: query
        description: ''
        required: false
        schema: 
          enum: [full,uuid,id]
      - name: pageSize
        in: query
        description: ''
        required: false
        schema: 
          type: string
      - name: pageIndex
        in: query
        description: ''
        required: false
        schema:
          type: integer
      - name: filter
        in: query
        description: 'This parameter allow the caller to filter the result set.'
        required: false
        schema:
          $ref: '#/components/schemas/FilterQuery'
      - name: sort
        in: query
        description: 'This parameter allow the caller to sort the result set by a field.'
        required: false
        schema:
          $ref: '#/components/schemas/SortQuery'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{entityClassName}}'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    post:
      tags:
        - Domain {{domain}}
      summary: Create one entity.
      description: ''
      operationId: ''
      parameters:
      - name: tenantId
        in: header
        description: ''
        required: true
        schema:
          type: string
      responses:
        '201':
          description: The entity has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SortQuery'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    delete:
      tags:
        - Domain {{domain}}
      summary: Delete all the entities.
      description: ''
      operationId: ''
      parameters:
      - name: tenantId
        in: header
        description: ''
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The entities has been deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{entityClassName}}'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '404':
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /{{domain}}/count:
    get:
      tags:
        - Domain {{domain}}
      summary: Get the total count of entities.
      description: ''
      operationId: ''
      parameters:
      - name: tenantId
        in: header
        description: ''
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Sucessfull
          content:
            application/json:
              schema:
                type: integer
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        
  /{{domain}}/{uuid}:
    get:
      tags:
        - Domain {{domain}}
      summary: Get one entity.
      description: ''
      operationId: ''
      parameters:
      - name: tenantId
        in: header
        description: ''
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: ''
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{entityClassName}}'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '404':
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    delete:
      tags:
        - Domain {{domain}}
      summary: Delete one entity.
      description: ''
      operationId: ''
      parameters:
      - name: tenantId
        in: header
        description: ''
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: ''
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The entity has been deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '404':
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    patch:
      tags:
        - Domain {{domain}}
      summary: Update one entity.
      description: ''
      operationId: ''
      parameters:
      - name: tenantId
        in: header
        description: ''
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        description: ''
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The entity has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{entityClassName}}'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '404':
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
      
components:
  schemas:
    {{entityClassName}}:
      {{entitySchema}}
    ErrorObject:
      description: ''
      type: object
      properties:
        message:
          description: ''
          type: string
    SortQuery:
      description: ''
      type: object
      properties:
        fieldName:
          description: ''
          type: string
        direction:
          description: ''
          type: string
          enum: [asc,desc]
    FilterQuery:
      type: object
      description: ''
      properties:
        name:
          description: ''
          type: string
          enum: [$field,$eq,$ne,$gt,$gte,$lt,$lte,$regex,$empty,$in,$nin,$and,$or,$nor]
        value:
          description: ''
          type: string
        literals:
          description: ''
          type: array
          items: 
            oneOf:
            - $ref: '#/components/schemas/FilterQuery'